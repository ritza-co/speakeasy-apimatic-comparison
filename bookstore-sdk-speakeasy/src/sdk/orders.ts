/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ordersCreateOrder } from "../funcs/ordersCreateOrder.js";
import { ordersGetAllOrders } from "../funcs/ordersGetAllOrders.js";
import { ordersGetOrderById } from "../funcs/ordersGetOrderById.js";
import { ordersGetOrderStream } from "../funcs/ordersGetOrderStream.js";
import { EventStream } from "../lib/event-streams.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Orders extends ClientSDK {
    /**
     * Get all orders
     *
     * @remarks
     * Returns a list of orders
     */
    async getAllOrders(options?: RequestOptions): Promise<Array<components.Order>> {
        return unwrapAsync(ordersGetAllOrders(this, options));
    }

    /**
     * Create a new order
     *
     * @remarks
     * Creates a new order
     */
    async createOrder(
        request: components.NewOrder,
        options?: RequestOptions
    ): Promise<components.Order> {
        return unwrapAsync(ordersCreateOrder(this, request, options));
    }

    /**
     * Get an order by ID
     *
     * @remarks
     * Returns a single order
     */
    async getOrderById(
        request: operations.GetOrderByIdRequest,
        options?: RequestOptions
    ): Promise<components.Order> {
        return unwrapAsync(ordersGetOrderById(this, request, options));
    }

    /**
     * Get a stream of orders
     *
     * @remarks
     * Returns a stream of orders
     */
    async getOrderStream(
        options?: RequestOptions
    ): Promise<EventStream<components.OrderStreamMessage>> {
        return unwrapAsync(ordersGetOrderStream(this, options));
    }
}
