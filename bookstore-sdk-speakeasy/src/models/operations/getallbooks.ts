/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as components from "../components/index.js";
import * as z from "zod";

export type ResponseBody =
    | (components.ProgrammingBook & { category: "Programming" })
    | (components.FantasyBook & { category: "Fantasy" })
    | (components.SciFiBook & { category: "Sci-fi" });

/** @internal */
export const ResponseBody$inboundSchema: z.ZodType<ResponseBody, z.ZodTypeDef, unknown> = z.union([
    components.ProgrammingBook$inboundSchema.and(
        z
            .object({ category: z.literal("Programming") })
            .transform((v) => ({ category: v.category }))
    ),
    components.FantasyBook$inboundSchema.and(
        z.object({ category: z.literal("Fantasy") }).transform((v) => ({ category: v.category }))
    ),
    components.SciFiBook$inboundSchema.and(
        z.object({ category: z.literal("Sci-fi") }).transform((v) => ({ category: v.category }))
    ),
]);

/** @internal */
export type ResponseBody$Outbound =
    | (components.ProgrammingBook$Outbound & { category: "Programming" })
    | (components.FantasyBook$Outbound & { category: "Fantasy" })
    | (components.SciFiBook$Outbound & { category: "Sci-fi" });

/** @internal */
export const ResponseBody$outboundSchema: z.ZodType<
    ResponseBody$Outbound,
    z.ZodTypeDef,
    ResponseBody
> = z.union([
    components.ProgrammingBook$outboundSchema.and(
        z
            .object({ category: z.literal("Programming") })
            .transform((v) => ({ category: v.category }))
    ),
    components.FantasyBook$outboundSchema.and(
        z.object({ category: z.literal("Fantasy") }).transform((v) => ({ category: v.category }))
    ),
    components.SciFiBook$outboundSchema.and(
        z.object({ category: z.literal("Sci-fi") }).transform((v) => ({ category: v.category }))
    ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody$ {
    /** @deprecated use `ResponseBody$inboundSchema` instead. */
    export const inboundSchema = ResponseBody$inboundSchema;
    /** @deprecated use `ResponseBody$outboundSchema` instead. */
    export const outboundSchema = ResponseBody$outboundSchema;
    /** @deprecated use `ResponseBody$Outbound` instead. */
    export type Outbound = ResponseBody$Outbound;
}
