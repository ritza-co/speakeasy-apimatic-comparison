/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { blobLikeSchema } from "../../types/blobs.js";
import * as z from "zod";

export type Cover = {
    fileName: string;
    content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Buffer;
};

/**
 * Book cover
 */
export type UpdateBookCoverByIdRequestBody = {
    cover?: Cover | Blob | undefined;
};

export type UpdateBookCoverByIdRequest = {
    /**
     * ID of the book to update
     */
    bookId: number;
    /**
     * Book cover
     */
    requestBody: UpdateBookCoverByIdRequestBody;
};

/** @internal */
export const Cover$inboundSchema: z.ZodType<Cover, z.ZodTypeDef, unknown> = z.object({
    fileName: z.string(),
    content: z.union([
        z.instanceof(ReadableStream<Uint8Array>),
        z.instanceof(Blob),
        z.instanceof(ArrayBuffer),
        z.instanceof(Buffer),
    ]),
});

/** @internal */
export type Cover$Outbound = {
    fileName: string;
    content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Buffer;
};

/** @internal */
export const Cover$outboundSchema: z.ZodType<Cover$Outbound, z.ZodTypeDef, Cover> = z.object({
    fileName: z.string(),
    content: z.union([
        z.instanceof(ReadableStream<Uint8Array>),
        z.instanceof(Blob),
        z.instanceof(ArrayBuffer),
        z.instanceof(Buffer),
    ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Cover$ {
    /** @deprecated use `Cover$inboundSchema` instead. */
    export const inboundSchema = Cover$inboundSchema;
    /** @deprecated use `Cover$outboundSchema` instead. */
    export const outboundSchema = Cover$outboundSchema;
    /** @deprecated use `Cover$Outbound` instead. */
    export type Outbound = Cover$Outbound;
}

/** @internal */
export const UpdateBookCoverByIdRequestBody$inboundSchema: z.ZodType<
    UpdateBookCoverByIdRequestBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    cover: z.lazy(() => Cover$inboundSchema).optional(),
});

/** @internal */
export type UpdateBookCoverByIdRequestBody$Outbound = {
    cover?: Cover$Outbound | Blob | undefined;
};

/** @internal */
export const UpdateBookCoverByIdRequestBody$outboundSchema: z.ZodType<
    UpdateBookCoverByIdRequestBody$Outbound,
    z.ZodTypeDef,
    UpdateBookCoverByIdRequestBody
> = z.object({
    cover: z
        .lazy(() => Cover$outboundSchema)
        .or(blobLikeSchema)
        .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBookCoverByIdRequestBody$ {
    /** @deprecated use `UpdateBookCoverByIdRequestBody$inboundSchema` instead. */
    export const inboundSchema = UpdateBookCoverByIdRequestBody$inboundSchema;
    /** @deprecated use `UpdateBookCoverByIdRequestBody$outboundSchema` instead. */
    export const outboundSchema = UpdateBookCoverByIdRequestBody$outboundSchema;
    /** @deprecated use `UpdateBookCoverByIdRequestBody$Outbound` instead. */
    export type Outbound = UpdateBookCoverByIdRequestBody$Outbound;
}

/** @internal */
export const UpdateBookCoverByIdRequest$inboundSchema: z.ZodType<
    UpdateBookCoverByIdRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        bookId: z.number().int(),
        RequestBody: z.lazy(() => UpdateBookCoverByIdRequestBody$inboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            RequestBody: "requestBody",
        });
    });

/** @internal */
export type UpdateBookCoverByIdRequest$Outbound = {
    bookId: number;
    RequestBody: UpdateBookCoverByIdRequestBody$Outbound;
};

/** @internal */
export const UpdateBookCoverByIdRequest$outboundSchema: z.ZodType<
    UpdateBookCoverByIdRequest$Outbound,
    z.ZodTypeDef,
    UpdateBookCoverByIdRequest
> = z
    .object({
        bookId: z.number().int(),
        requestBody: z.lazy(() => UpdateBookCoverByIdRequestBody$outboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            requestBody: "RequestBody",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBookCoverByIdRequest$ {
    /** @deprecated use `UpdateBookCoverByIdRequest$inboundSchema` instead. */
    export const inboundSchema = UpdateBookCoverByIdRequest$inboundSchema;
    /** @deprecated use `UpdateBookCoverByIdRequest$outboundSchema` instead. */
    export const outboundSchema = UpdateBookCoverByIdRequest$outboundSchema;
    /** @deprecated use `UpdateBookCoverByIdRequest$Outbound` instead. */
    export type Outbound = UpdateBookCoverByIdRequest$Outbound;
}
