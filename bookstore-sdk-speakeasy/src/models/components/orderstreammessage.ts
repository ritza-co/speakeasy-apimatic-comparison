/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { Order, Order$inboundSchema, Order$Outbound, Order$outboundSchema } from "./order.js";
import * as z from "zod";

/**
 * A message in the order stream
 */
export type OrderStreamMessage = {
    id: string;
    event: string;
    data: Order;
};

/** @internal */
export const OrderStreamMessage$inboundSchema: z.ZodType<
    OrderStreamMessage,
    z.ZodTypeDef,
    unknown
> = z.object({
    id: z.string(),
    event: z.string(),
    data: z
        .string()
        .transform((v, ctx) => {
            try {
                return JSON.parse(v);
            } catch (err) {
                ctx.addIssue({ code: z.ZodIssueCode.custom, message: `malformed json: ${err}` });
                return z.NEVER;
            }
        })
        .pipe(Order$inboundSchema),
});

/** @internal */
export type OrderStreamMessage$Outbound = {
    id: string;
    event: string;
    data: Order$Outbound;
};

/** @internal */
export const OrderStreamMessage$outboundSchema: z.ZodType<
    OrderStreamMessage$Outbound,
    z.ZodTypeDef,
    OrderStreamMessage
> = z.object({
    id: z.string(),
    event: z.string(),
    data: Order$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderStreamMessage$ {
    /** @deprecated use `OrderStreamMessage$inboundSchema` instead. */
    export const inboundSchema = OrderStreamMessage$inboundSchema;
    /** @deprecated use `OrderStreamMessage$outboundSchema` instead. */
    export const outboundSchema = OrderStreamMessage$outboundSchema;
    /** @deprecated use `OrderStreamMessage$Outbound` instead. */
    export type Outbound = OrderStreamMessage$Outbound;
}
