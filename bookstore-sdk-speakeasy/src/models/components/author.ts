/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type AuthorWithID = {
    id: number;
    name?: string | undefined;
    photo?: string | undefined;
    biography?: string | undefined;
};

export type AuthorWithName = {
    id?: number | undefined;
    name: string;
    photo?: string | undefined;
    biography?: string | undefined;
};

export type Author = AuthorWithName | AuthorWithID;

/** @internal */
export const AuthorWithID$inboundSchema: z.ZodType<AuthorWithID, z.ZodTypeDef, unknown> = z.object({
    id: z.number().int(),
    name: z.string().optional(),
    photo: z.string().optional(),
    biography: z.string().optional(),
});

/** @internal */
export type AuthorWithID$Outbound = {
    id: number;
    name?: string | undefined;
    photo?: string | undefined;
    biography?: string | undefined;
};

/** @internal */
export const AuthorWithID$outboundSchema: z.ZodType<
    AuthorWithID$Outbound,
    z.ZodTypeDef,
    AuthorWithID
> = z.object({
    id: z.number().int(),
    name: z.string().optional(),
    photo: z.string().optional(),
    biography: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthorWithID$ {
    /** @deprecated use `AuthorWithID$inboundSchema` instead. */
    export const inboundSchema = AuthorWithID$inboundSchema;
    /** @deprecated use `AuthorWithID$outboundSchema` instead. */
    export const outboundSchema = AuthorWithID$outboundSchema;
    /** @deprecated use `AuthorWithID$Outbound` instead. */
    export type Outbound = AuthorWithID$Outbound;
}

/** @internal */
export const AuthorWithName$inboundSchema: z.ZodType<AuthorWithName, z.ZodTypeDef, unknown> =
    z.object({
        id: z.number().int().optional(),
        name: z.string(),
        photo: z.string().optional(),
        biography: z.string().optional(),
    });

/** @internal */
export type AuthorWithName$Outbound = {
    id?: number | undefined;
    name: string;
    photo?: string | undefined;
    biography?: string | undefined;
};

/** @internal */
export const AuthorWithName$outboundSchema: z.ZodType<
    AuthorWithName$Outbound,
    z.ZodTypeDef,
    AuthorWithName
> = z.object({
    id: z.number().int().optional(),
    name: z.string(),
    photo: z.string().optional(),
    biography: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthorWithName$ {
    /** @deprecated use `AuthorWithName$inboundSchema` instead. */
    export const inboundSchema = AuthorWithName$inboundSchema;
    /** @deprecated use `AuthorWithName$outboundSchema` instead. */
    export const outboundSchema = AuthorWithName$outboundSchema;
    /** @deprecated use `AuthorWithName$Outbound` instead. */
    export type Outbound = AuthorWithName$Outbound;
}

/** @internal */
export const Author$inboundSchema: z.ZodType<Author, z.ZodTypeDef, unknown> = z.union([
    z.lazy(() => AuthorWithName$inboundSchema),
    z.lazy(() => AuthorWithID$inboundSchema),
]);

/** @internal */
export type Author$Outbound = AuthorWithName$Outbound | AuthorWithID$Outbound;

/** @internal */
export const Author$outboundSchema: z.ZodType<Author$Outbound, z.ZodTypeDef, Author> = z.union([
    z.lazy(() => AuthorWithName$outboundSchema),
    z.lazy(() => AuthorWithID$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Author$ {
    /** @deprecated use `Author$inboundSchema` instead. */
    export const inboundSchema = Author$inboundSchema;
    /** @deprecated use `Author$outboundSchema` instead. */
    export const outboundSchema = Author$outboundSchema;
    /** @deprecated use `Author$Outbound` instead. */
    export type Outbound = Author$Outbound;
}
