/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import {
    FantasyBook,
    FantasyBook$inboundSchema,
    FantasyBook$Outbound,
    FantasyBook$outboundSchema,
} from "./fantasybook.js";
import {
    ProgrammingBook,
    ProgrammingBook$inboundSchema,
    ProgrammingBook$Outbound,
    ProgrammingBook$outboundSchema,
} from "./programmingbook.js";
import {
    SciFiBook,
    SciFiBook$inboundSchema,
    SciFiBook$Outbound,
    SciFiBook$outboundSchema,
} from "./scifibook.js";
import { User, User$inboundSchema, User$Outbound, User$outboundSchema } from "./user.js";
import * as z from "zod";

export const Status = {
    Pending: "pending",
    Shipped: "shipped",
    Delivered: "delivered",
} as const;
export type Status = ClosedEnum<typeof Status>;

export type Products =
    | (ProgrammingBook & { category: "Programming" })
    | (FantasyBook & { category: "Fantasy" })
    | (SciFiBook & { category: "Sci-fi" });

export type Order = {
    id: number;
    date: Date;
    status: Status;
    user: User;
    products: Array<
        | (ProgrammingBook & { category: "Programming" })
        | (FantasyBook & { category: "Fantasy" })
        | (SciFiBook & { category: "Sci-fi" })
    >;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z.nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> = Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
    /** @deprecated use `Status$inboundSchema` instead. */
    export const inboundSchema = Status$inboundSchema;
    /** @deprecated use `Status$outboundSchema` instead. */
    export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const Products$inboundSchema: z.ZodType<Products, z.ZodTypeDef, unknown> = z.union([
    ProgrammingBook$inboundSchema.and(
        z
            .object({ category: z.literal("Programming") })
            .transform((v) => ({ category: v.category }))
    ),
    FantasyBook$inboundSchema.and(
        z.object({ category: z.literal("Fantasy") }).transform((v) => ({ category: v.category }))
    ),
    SciFiBook$inboundSchema.and(
        z.object({ category: z.literal("Sci-fi") }).transform((v) => ({ category: v.category }))
    ),
]);

/** @internal */
export type Products$Outbound =
    | (ProgrammingBook$Outbound & { category: "Programming" })
    | (FantasyBook$Outbound & { category: "Fantasy" })
    | (SciFiBook$Outbound & { category: "Sci-fi" });

/** @internal */
export const Products$outboundSchema: z.ZodType<Products$Outbound, z.ZodTypeDef, Products> =
    z.union([
        ProgrammingBook$outboundSchema.and(
            z
                .object({ category: z.literal("Programming") })
                .transform((v) => ({ category: v.category }))
        ),
        FantasyBook$outboundSchema.and(
            z
                .object({ category: z.literal("Fantasy") })
                .transform((v) => ({ category: v.category }))
        ),
        SciFiBook$outboundSchema.and(
            z.object({ category: z.literal("Sci-fi") }).transform((v) => ({ category: v.category }))
        ),
    ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Products$ {
    /** @deprecated use `Products$inboundSchema` instead. */
    export const inboundSchema = Products$inboundSchema;
    /** @deprecated use `Products$outboundSchema` instead. */
    export const outboundSchema = Products$outboundSchema;
    /** @deprecated use `Products$Outbound` instead. */
    export type Outbound = Products$Outbound;
}

/** @internal */
export const Order$inboundSchema: z.ZodType<Order, z.ZodTypeDef, unknown> = z.object({
    id: z.number().int(),
    date: z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    status: Status$inboundSchema,
    user: User$inboundSchema,
    products: z.array(
        z.union([
            ProgrammingBook$inboundSchema.and(
                z
                    .object({ category: z.literal("Programming") })
                    .transform((v) => ({ category: v.category }))
            ),
            FantasyBook$inboundSchema.and(
                z
                    .object({ category: z.literal("Fantasy") })
                    .transform((v) => ({ category: v.category }))
            ),
            SciFiBook$inboundSchema.and(
                z
                    .object({ category: z.literal("Sci-fi") })
                    .transform((v) => ({ category: v.category }))
            ),
        ])
    ),
});

/** @internal */
export type Order$Outbound = {
    id: number;
    date: string;
    status: string;
    user: User$Outbound;
    products: Array<
        | (ProgrammingBook$Outbound & { category: "Programming" })
        | (FantasyBook$Outbound & { category: "Fantasy" })
        | (SciFiBook$Outbound & { category: "Sci-fi" })
    >;
};

/** @internal */
export const Order$outboundSchema: z.ZodType<Order$Outbound, z.ZodTypeDef, Order> = z.object({
    id: z.number().int(),
    date: z.date().transform((v) => v.toISOString()),
    status: Status$outboundSchema,
    user: User$outboundSchema,
    products: z.array(
        z.union([
            ProgrammingBook$outboundSchema.and(
                z
                    .object({ category: z.literal("Programming") })
                    .transform((v) => ({ category: v.category }))
            ),
            FantasyBook$outboundSchema.and(
                z
                    .object({ category: z.literal("Fantasy") })
                    .transform((v) => ({ category: v.category }))
            ),
            SciFiBook$outboundSchema.and(
                z
                    .object({ category: z.literal("Sci-fi") })
                    .transform((v) => ({ category: v.category }))
            ),
        ])
    ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Order$ {
    /** @deprecated use `Order$inboundSchema` instead. */
    export const inboundSchema = Order$inboundSchema;
    /** @deprecated use `Order$outboundSchema` instead. */
    export const outboundSchema = Order$outboundSchema;
    /** @deprecated use `Order$Outbound` instead. */
    export type Outbound = Order$Outbound;
}
