/**
 * Bookstore APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { NewOrder, newOrderSchema } from '../models/newOrder';
import { Order, orderSchema } from '../models/order';
import {
  OrderStreamMessage,
  orderStreamMessageSchema,
} from '../models/orderStreamMessage';
import { array, number } from '../schema';
import { BaseController } from './baseController';

export class OrdersController extends BaseController {
  /**
   * Returns a list of orders
   *
   * @return Response from the API call
   */
  async getAllOrders(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Order[]>> {
    const req = this.createRequest('GET', '/orders');
    req.authenticate([{ clientCredentials: true }]);
    return req.callAsJson(array(orderSchema), requestOptions);
  }

  /**
   * Creates a new order
   *
   * @param body         Order object to be created
   * @return Response from the API call
   */
  async createOrder(
    body: NewOrder,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Order>> {
    const req = this.createRequest('POST', '/orders');
    const mapped = req.prepareArgs({ body: [body, newOrderSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.authenticate([{ clientCredentials: true }]);
    return req.callAsJson(orderSchema, requestOptions);
  }

  /**
   * Returns a single order
   *
   * @param orderId ID of the order to return
   * @return Response from the API call
   */
  async getOrderById(
    orderId: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Order>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ orderId: [orderId, number()] });
    req.appendTemplatePath`/orders/${mapped.orderId}`;
    req.authenticate([{ clientCredentials: true }]);
    return req.callAsJson(orderSchema, requestOptions);
  }

  /**
   * Returns a stream of orders
   *
   * @return Response from the API call
   */
  async getOrderStream(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<OrderStreamMessage>> {
    const req = this.createRequest('GET', '/orderstream');
    req.authenticate([{ apiKey: true }]);
    return req.callAsJson(orderStreamMessageSchema, requestOptions);
  }
}
