/**
 * Bookstore APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { anyOf, Schema, validateAndMap } from '../../schema';
import { AuthorWithID, authorWithIDSchema } from '../authorWithID';
import { AuthorWithName, authorWithNameSchema } from '../authorWithName';

/** This is a container type for any-of types. */
export type Author2 = AuthorWithName | AuthorWithID;

export const author2Schema: Schema<Author2> = anyOf([
  authorWithNameSchema,
  authorWithIDSchema,
]);

export namespace Author2 {
  /**
   * Validation method to narrow down union type to AuthorWithName type case.
   *
   * This is Author with name case.
   */
  export function isAuthorWithName(value: unknown): value is AuthorWithName {
    const validationResult = validateAndMap(value, authorWithNameSchema);
    return validationResult.errors === false;
  }

  /**
   * Validation method to narrow down union type to AuthorWithID type case.
   *
   * This is Author with ID case.
   */
  export function isAuthorWithID(value: unknown): value is AuthorWithID {
    const validationResult = validateAndMap(value, authorWithIDSchema);
    return validationResult.errors === false;
  }
}
